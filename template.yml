AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::CodeStar
- AWS::Serverless-2016-10-31

Conditions:
  UseSubnet: !Not [!Equals [!Ref 'SubnetId', subnet-none]]

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar project ID used to name project resources and create roles.
  InstanceType:
    Type: String
    Description: The type of Amazon EC2 Linux instances that will be launched for this project.
  KeyPairName:
    Type: String
    Description: The name of an existing Amazon EC2 key pair in the region where the project is created, which you can use to SSH into the new Amazon EC2 Linux instances.
  VpcId:
    Type: String
    Description: The ID of the Amazon Virtual Private Cloud (VPC) used for the new Amazon EC2 Linux instances.
  SubnetId:
    Type: String
    Description: The name of the VPC subnet used for the new Amazon EC2 Linux instances launched for this project.
  SolutionStackName:
    Type: String
    Description: The software stack used to launch environments and configure instances in AWS Elastic Beanstalk.
  EBTrustRole:
    Type: String
    Description: The service role in IAM for AWS Elastic Beanstalk to be created for this project.
  EBInstanceProfile:
    Type: String
    Description: The IAM role that will be created for the Amazon EC2 Linux instances.
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  OperationBucket:
    Type: String
    Description: The bucket where the application operates
    Default: ahlconsolebucket
Resources:
  EBApplication:
    Description: The AWS Elastic Beanstalk application, which is a container used to deploy the correct application configuration.
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Sub '${ProjectId}app${Stage}'
      Description: The name of the AWS Elastic Beanstalk application to be created for this project.
  EBApplicationVersion:
    Description: The version of the AWS Elastic Beanstalk application to be created for this project.
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref 'EBApplication'
      Description: The application version number.
      SourceBundle: '.'
  EBConfigurationTemplate:
    Description: The AWS Elastic Beanstalk configuration template to be created for this project, which defines configuration settings used to deploy different versions of an application.
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref 'EBApplication'
      Description: The name of the sample configuration template.
      OptionSettings:
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: SingleInstance
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: ServiceRole
        Value: !Ref 'EBTrustRole'
      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: SystemType
        Value: enhanced
      SolutionStackName: !Ref 'SolutionStackName'
  EBEnvironment:
    Description: The AWS Elastic Beanstalk deployment group where the application is deployed, which is made up of the Amazon EC2 Linux instances launched for this project.
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref 'EBApplication'
      EnvironmentName: !Ref 'EBApplication'
      Description: The application to be deployed to the environment.
      TemplateName: !Ref 'EBConfigurationTemplate'
      VersionLabel: !Ref 'EBApplicationVersion'
      OptionSettings:
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: !Ref 'EBInstanceProfile'
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: InstanceType
        Value: !Ref 'InstanceType'
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName
        Value: !Ref 'KeyPairName'
      - Namespace: aws:ec2:vpc
        OptionName: VPCId
        Value: !Ref 'VpcId'
      - !If
        - UseSubnet
        - Namespace: 'aws:ec2:vpc'
          OptionName: Subnets
          Value: !Ref 'SubnetId'
        - !Ref "AWS::NoValue"
  consoleBucket:
    Description: The bucket containing videos from the console application
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: "ahlconsolebucket"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt thumbfy.Arn
  thumbfyPermission:
    Description: The lambda permission to been invoked by an s3 event
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref thumbfy
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !GetAtt consoleBucket.Arn
#  thumbfyPermission:
#    Description: The lambda permission to been invoked by an s3 event
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: 'lambda:InvokeFunction'
#      FunctionName: !Ref thumbfy
#      Principal: 's3.amazonaws.com'
#      SourceAccount: !Ref "AWS::AccountId"
#      SourceArn: !Sub "arn:aws:s3:::${OperationBucket}"
#      NotificationConfiguration:
#        LambdaConfiguration:
#          - Event: s3::ObjectCreated:*
#            Filter:
#              S3Key:
#                Rules:
#                  - Name: prefix
#                    Value: origin/
#                  - Name: suffix
#                    Value: .mp4
#            Function: !GetAtt thumbfy.Arn
#          - Event: s3::ObjectCreated:*
#            Filter:
#              S3Key:
#                Rules:
#                  - Name: prefix
#                    Value: thumbnails/
#                  - Name: suffix
#                    Value: -low.mp4
#            Function: !GetAtt remover.Arn
#          - Event: s3::ObjectCreated:*
#            Filter:
#              S3Key:
#                Rules:
#                    - Name: prefix
#                      Value: frames/
#                    - Name: suffix
#                      Value: -low.mp4
#            Function: !GetAtt remover.Arn
  recoTopic:
    Description: The SNS Topic for recnognizement news messaging
    DeletionPolicy: Delete
    Type: AWS::SNS::Topic
    Properties:
      TopicName: recognizement
  trainTopic:
    Description: The SNS Topic for training news messaging
    DeletionPolicy: Delete
    Type: AWS::SNS::Topic
    Properties:
      TopicName: training
  editTopic:
    Description: The SNS Topic for editing news messaging
    DeletionPolicy: Delete
    Type: AWS::SNS::Topic
    Properties:
      TopicName: editLabels
  confirmTopic:
    Description: The SNS Topic for confirmations news messaging
    DeletionPolicy: Delete
    Type: AWS::SNS::Topic
    Properties:
      TopicName: confirmation
      Subscription:
        - Endpoint: !GetAtt framer.Arn
          Protocol: lambda
  ahlLog:
    Description: The Autonomous HighLight Logging Group
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ahlLogs
      RetentionInDays: 7
  stepFRole:
    Description: The role for AWS Step Functions
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: frameWorkflowRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:*"
                  - "logs:*"
                  - "states:*"
                Resource: "*"
  basicLambdaRole:
    Description: The role for AWS Lambda Functions
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ahllambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "*"
  dynamoLambdaRole:
    Description: The role for AWS Lambda Functions
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ahlDynamoLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "*"
        - PolicyName: AmazonDynamoDBFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:*"
                Resource: "*"
  sagemakerDynamoLambdaRole:
    Description: The role for AWS Lambda Functions
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ahlSagemakerDynamoLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "*"
        - PolicyName: AmazonDynamoDBFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:*"
                Resource: "*"
        - PolicyName: runtime_InvokeEndpoint
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sagemaker:InvokeEndpoint"
                Resource: "*"
  frameWorkflow:
    Description: The step function that defines the frame workflow
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
        - |-
          ##{{STATEMACHINE_DEF}}
        - prepareDataArn: !GetAtt [prepareData, Arn]
          frameGroupingArn: !GetAtt [frameGrouping, Arn]
          recognizerArn: !GetAtt [recognizer, Arn]
      RoleArn: !GetAtt stepFRole.Arn
      StateMachineName: ahlFrameWorkflow
      StateMachineType: STANDARD
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ahlLog.Arn
        IncludeExecutionData: true
        Level: ERROR
  thumbfy:
    Description: The lambda that runs a Mediaconvert job to create thumbnail
    Type: AWS::Serverless::Function
    DeletionPolicy: Delete
    Properties:
      Handler: thumbfy.lambda_handler
      Role: !GetAtt basicLambdaRole.Arn
      Runtime: python3.7
      CodeUri: ./python/src/
  prepareData:
    Description: The lambda that cleans data before processing frames
    Type: AWS::Serverless::Function
    DeletionPolicy: Delete
    Properties:
      Handler: clean_data.lambda_handler
      Role: !GetAtt dynamoLambdaRole.Arn
      Runtime: python3.7
      CodeUri: ./python/src/
  frameGrouping:
    Description: The lambda that calculates frame grouping before recognizements
    Type: AWS::Serverless::Function
    DeletionPolicy: Delete
    Properties:
      Handler: frame_grouping.lambda_handler
      Role: !GetAtt basicLambdaRole.Arn
      Runtime: python3.7
      CodeUri: ./python/src/
  recognizer:
    Description: The lambda that calculates frame grouping before recognizements
    Type: AWS::Serverless::Function
    DeletionPolicy: Delete
    Properties:
      Handler: recognize.lambda_handler
      Role: !GetAtt sagemakerDynamoLambdaRole.Arn
      Runtime: python3.7
      CodeUri: ./python/src/
  remover:
    Description: The lambda that deletes useless objects
    Type: AWS::Serverless::Function
    DeletionPolicy: Delete
    Properties:
      Handler: remover.lambda_handler
      Role: !GetAtt basicLambdaRole.Arn
      Runtime: python3.7
      CodeUri: ./python/src/
  framer:
    Description: The Lambda that creates frames before processing
    Type: AWS::Serverless::Function
    DeletionPolicy: Delete
    Properties:
      Handler: framer.lambda_handler
      Role: !GetAtt basicLambdaRole.Arn
      Runtime: python3.7
      CodeUri: ./python/src/